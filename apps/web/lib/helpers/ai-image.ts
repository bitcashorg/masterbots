/**
 * Helper functions for image generation and manipulation
 */
import {
	type GeneratedImage,
	type ImageMessage,
	isImageMessage,
} from '@/types/types'

export const imageHelpers = {
	/**
	 * Converts base64 data to a Blob
	 */
	base64ToBlob: (base64Data: string, type = 'image/png'): Blob => {
		// Handle data URLs if needed
		const actualBase64 = base64Data.includes('base64,')
			? base64Data.split('base64,')[1]
			: base64Data

		const byteString = atob(actualBase64)
		const arrayBuffer = new ArrayBuffer(byteString.length)
		const uint8Array = new Uint8Array(arrayBuffer)

		for (let i = 0; i < byteString.length; i++) {
			uint8Array[i] = byteString.charCodeAt(i)
		}

		return new Blob([uint8Array], { type })
	},

	/**
	 * Generates a unique filename for the image
	 */
	generateImageFileName: (modelId: string): string => {
		const date = new Date().toISOString().split('T')[0]
		const uniqueId = Math.random().toString(36).substring(2, 8)
		return `${date}-${modelId.toLowerCase()}-${uniqueId}`.replace(
			/[^a-z0-9-]/gi,
			'',
		)
	},

	/**
	 * Share or download an image
	 */
	shareOrDownload: async (
		imageData: string,
		modelId: string,
	): Promise<void> => {
		const fileName = imageHelpers.generateImageFileName(modelId)
		const blob = imageHelpers.base64ToBlob(imageData)
		const file = new File([blob], `${fileName}.png`, { type: 'image/png' })

		try {
			if (navigator.share) {
				await navigator.share({
					files: [file],
					title: `Image generated by ${modelId}`,
				})
			} else {
				throw new Error('Share API not available')
			}
		} catch (error) {
			// Fall back to download for any error (including share cancellation)
			console.error('Error sharing/downloading:', error)
			const blobUrl = URL.createObjectURL(blob)
			const link = document.createElement('a')
			link.href = blobUrl
			link.download = `${fileName}.png`
			document.body.appendChild(link)
			link.click()
			document.body.removeChild(link)
			URL.revokeObjectURL(blobUrl)
		}
	},

	/**
	 * Format model ID for display
	 */
	formatModelId: (modelId: string): string => {
		return modelId.split('/').pop() || modelId
	},

	/**
	 * Create an image message from a generated image
	 */
	createImageMessage: (image: GeneratedImage): ImageMessage => {
		return {
			id: image.id,
			role: 'assistant',
			content: image.prompt,
			image: image,
		}
	},

	/**
	 * Extract images from an array of messages
	 */

	// biome-ignore lint/suspicious/noExplicitAny: <explanation>
	extractImagesFromMessages: (messages: any[]): GeneratedImage[] => {
		return messages.filter(isImageMessage).map((message) => message.image)
	},

	/**
	 * Adds base64 prefix if not present
	 */
	ensureBase64Prefix: (base64: string, mimeType = 'image/png'): string => {
		if (base64.startsWith('data:')) {
			return base64
		}
		return `data:${mimeType};base64,${base64}`
	},
}
