/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nextjs-toploader";
exports.ids = ["vendor-chunks/nextjs-toploader"];
exports.modules = {
  /***/ "(rsc)/../../node_modules/nextjs-toploader/dist/index.js":
    /*!*********************************************************!*\
  !*** ../../node_modules/nextjs-toploader/dist/index.js ***!
  \*********************************************************/
    /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      const { createProxy } = __webpack_require__(
        /*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js",
      );

      module.exports = createProxy(
        "/Users/sheriff/Desktop/bitcash-apps/masterbots/node_modules/nextjs-toploader/dist/index.js",
      );

      /***/
    },

  /***/ "(ssr)/../../node_modules/nextjs-toploader/dist/index.js":
    /*!*********************************************************!*\
  !*** ../../node_modules/nextjs-toploader/dist/index.js ***!
  \*********************************************************/
    /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      eval(
        '/* __next_internal_client_entry_do_not_use__  cjs */ \nvar ae = Object.create;\nvar N = Object.defineProperty, pe = Object.defineProperties, ce = Object.getOwnPropertyDescriptor, le = Object.getOwnPropertyDescriptors, de = Object.getOwnPropertyNames, F = Object.getOwnPropertySymbols, ge = Object.getPrototypeOf, D = Object.prototype.hasOwnProperty, me = Object.prototype.propertyIsEnumerable;\nvar _ = (e, r, o)=>r in e ? N(e, r, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: o\n    }) : e[r] = o, G = (e, r)=>{\n    for(var o in r || (r = {}))D.call(r, o) && _(e, o, r[o]);\n    if (F) for (var o of F(r))me.call(r, o) && _(e, o, r[o]);\n    return e;\n}, Q = (e, r)=>pe(e, le(r)), p = (e, r)=>N(e, "name", {\n        value: r,\n        configurable: !0\n    });\nvar ue = (e, r)=>{\n    for(var o in r)N(e, o, {\n        get: r[o],\n        enumerable: !0\n    });\n}, V = (e, r, o, l)=>{\n    if (r && typeof r == "object" || typeof r == "function") for (let s of de(r))!D.call(e, s) && s !== o && N(e, s, {\n        get: ()=>r[s],\n        enumerable: !(l = ce(r, s)) || l.enumerable\n    });\n    return e;\n};\nvar y = (e, r, o)=>(o = e != null ? ae(ge(e)) : {}, V(r || !e || !e.__esModule ? N(o, "default", {\n        value: e,\n        enumerable: !0\n    }) : o, e)), fe = (e)=>V(N({}, "__esModule", {\n        value: !0\n    }), e);\nvar be = {};\nue(be, {\n    PagesTopLoader: ()=>B,\n    default: ()=>he,\n    useRouter: ()=>Y\n});\nmodule.exports = fe(be);\nvar i = y(__webpack_require__(/*! prop-types */ "(ssr)/../../node_modules/prop-types/index.js")), M = y(__webpack_require__(/*! react */ "(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js")), c = y(__webpack_require__(/*! nprogress */ "(ssr)/../../node_modules/nprogress/nprogress.js"));\nvar O = __webpack_require__(/*! next/navigation */ "(ssr)/../../node_modules/next/dist/api/navigation.js"), U = __webpack_require__(/*! react */ "(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js"), C = y(__webpack_require__(/*! nprogress */ "(ssr)/../../node_modules/nprogress/nprogress.js"));\nvar Y = p(()=>{\n    let e = (0, O.useRouter)(), r = (0, O.usePathname)();\n    (0, U.useEffect)(()=>{\n        C.done();\n    }, [\n        r\n    ]);\n    let o = (0, U.useCallback)((s, d)=>{\n        s !== r && C.start(), e.replace(s, d);\n    }, [\n        e,\n        r\n    ]), l = (0, U.useCallback)((s, d)=>{\n        s !== r && C.start(), e.push(s, d);\n    }, [\n        e,\n        r\n    ]);\n    return Q(G({}, e), {\n        replace: o,\n        push: l\n    });\n}, "useRouter");\nvar n = y(__webpack_require__(/*! prop-types */ "(ssr)/../../node_modules/prop-types/index.js")), z = y(__webpack_require__(/*! react */ "(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js")), L = y(__webpack_require__(/*! nprogress */ "(ssr)/../../node_modules/nprogress/nprogress.js")), v = y(__webpack_require__(/*! next/router */ "(ssr)/../../node_modules/next/dist/api/router.js"));\nvar B = p(({ color: e, height: r, showSpinner: o, crawl: l, crawlSpeed: s, initialPosition: d, easing: x, speed: P, shadow: u, template: w, zIndex: E = 1600, showAtBottom: R = !1 })=>{\n    let K = "#29d", g = e != null ? e : K, W = r != null ? r : 3, I = !u && u !== void 0 ? "" : u ? `box-shadow:${u}` : `box-shadow:0 0 10px ${g},0 0 5px ${g}`, j = z.createElement("style", null, `#nprogress{pointer-events:none}#nprogress .bar{background:${g};position:fixed;z-index:${E};${R ? "bottom: 0;" : "top: 0;"}left:0;width:100%;height:${W}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${I};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:${E};${R ? "bottom: 15px;" : "top: 15px;"}right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${g};border-left-color:${g};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`);\n    return z.useEffect({\n        "B.useEffect": ()=>{\n            L.configure({\n                showSpinner: o != null ? o : !0,\n                trickle: l != null ? l : !0,\n                trickleSpeed: s != null ? s : 200,\n                minimum: d != null ? d : .08,\n                easing: x != null ? x : "ease",\n                speed: P != null ? P : 200,\n                template: w != null ? w : \'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>\'\n            });\n            let f = p({\n                "B.useEffect.f": ()=>L.start()\n            }["B.useEffect.f"], "progressStarted"), k = p({\n                "B.useEffect.k": ()=>L.done(!0)\n            }["B.useEffect.k"], "progressComplete");\n            return v.default.events.on("routeChangeStart", f), v.default.events.on("routeChangeComplete", k), v.default.events.on("routeChangeError", k), ({\n                "B.useEffect": ()=>{\n                    v.default.events.off("routeChangeStart", f), v.default.events.off("routeChangeComplete", k), v.default.events.off("routeChangeError", k);\n                }\n            })["B.useEffect"];\n        }\n    }["B.useEffect"], []), j;\n}, "PagesTopLoader");\nB.propTypes = {\n    color: n.string,\n    height: n.number,\n    showSpinner: n.bool,\n    crawl: n.bool,\n    crawlSpeed: n.number,\n    initialPosition: n.number,\n    easing: n.string,\n    speed: n.number,\n    template: n.string,\n    shadow: n.oneOfType([\n        n.string,\n        n.bool\n    ]),\n    zIndex: n.number,\n    showAtBottom: n.bool\n};\nvar Z = p(({ color: e, height: r, showSpinner: o, crawl: l, crawlSpeed: s, initialPosition: d, easing: x, speed: P, shadow: u, template: w, zIndex: E = 1600, showAtBottom: R = !1 })=>{\n    let K = "#29d", g = e != null ? e : K, W = r != null ? r : 3, I = !u && u !== void 0 ? "" : u ? `box-shadow:${u}` : `box-shadow:0 0 10px ${g},0 0 5px ${g}`, j = M.createElement("style", null, `#nprogress{pointer-events:none}#nprogress .bar{background:${g};position:fixed;z-index:${E};${R ? "bottom: 0;" : "top: 0;"}left:0;width:100%;height:${W}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${I};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:${E};${R ? "bottom: 15px;" : "top: 15px;"}right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${g};border-left-color:${g};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`), f = p((T)=>new URL(T, window.location.href).href, "toAbsoluteURL"), k = p((T, $)=>{\n        let h = new URL(f(T)), S = new URL(f($));\n        return h.href.split("#")[0] === S.href.split("#")[0];\n    }, "isHashAnchor"), te = p((T, $)=>{\n        let h = new URL(f(T)), S = new URL(f($));\n        return h.hostname.replace(/^www\\./, "") === S.hostname.replace(/^www\\./, "");\n    }, "isSameHostName");\n    return M.useEffect({\n        "Z.useEffect": ()=>{\n            c.configure({\n                showSpinner: o != null ? o : !0,\n                trickle: l != null ? l : !0,\n                trickleSpeed: s != null ? s : 200,\n                minimum: d != null ? d : .08,\n                easing: x != null ? x : "ease",\n                speed: P != null ? P : 200,\n                template: w != null ? w : \'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>\'\n            });\n            function T(t, b) {\n                let a = new URL(t), m = new URL(b);\n                if (a.hostname === m.hostname && a.pathname === m.pathname && a.search === m.search) {\n                    let A = a.hash, H = m.hash;\n                    return A !== H && a.href.replace(A, "") === m.href.replace(H, "");\n                }\n                return !1;\n            }\n            p(T, "isAnchorOfCurrentUrl");\n            var $ = document.querySelectorAll("html");\n            let h = p({\n                "Z.useEffect.h": ()=>$.forEach({\n                        "Z.useEffect.h": (t)=>t.classList.remove("nprogress-busy")\n                    }["Z.useEffect.h"])\n            }["Z.useEffect.h"], "removeNProgressClass");\n            function S(t) {\n                for(; t && t.tagName.toLowerCase() !== "a";)t = t.parentElement;\n                return t;\n            }\n            p(S, "findClosestAnchor");\n            function J(t) {\n                try {\n                    let b = t.target, a = S(b), m = a == null ? void 0 : a.href;\n                    if (m) {\n                        let A = window.location.href, H = a.target === "_blank", se = [\n                            "tel:",\n                            "mailto:",\n                            "sms:",\n                            "blob:",\n                            "download:"\n                        ].some({\n                            "Z.useEffect.J.se": (ie)=>m.startsWith(ie)\n                        }["Z.useEffect.J.se"]), ne = T(A, m);\n                        if (!te(window.location.href, a.href)) return;\n                        m === A || ne || H || se || t.ctrlKey || t.metaKey || t.shiftKey || t.altKey || k(window.location.href, a.href) || !f(a.href).startsWith("http") ? (c.start(), c.done(), h()) : c.start();\n                    }\n                } catch (b) {\n                    c.start(), c.done();\n                }\n            }\n            p(J, "handleClick"), ({\n                "Z.useEffect": (t)=>{\n                    let b = t.pushState;\n                    t.pushState = ({\n                        "Z.useEffect": (...a)=>(c.done(), h(), b.apply(t, a))\n                    })["Z.useEffect"];\n                }\n            })["Z.useEffect"](window.history), ({\n                "Z.useEffect": (t)=>{\n                    let b = t.replaceState;\n                    t.replaceState = ({\n                        "Z.useEffect": (...a)=>(c.done(), h(), b.apply(t, a))\n                    })["Z.useEffect"];\n                }\n            })["Z.useEffect"](window.history);\n            function X() {\n                c.done(), h();\n            }\n            p(X, "handlePageHide");\n            function q() {\n                c.done();\n            }\n            return p(q, "handleBackAndForth"), window.addEventListener("popstate", q), document.addEventListener("click", J), window.addEventListener("pagehide", X), ({\n                "Z.useEffect": ()=>{\n                    document.removeEventListener("click", J), window.removeEventListener("pagehide", X), window.removeEventListener("popstate", q);\n                }\n            })["Z.useEffect"];\n        }\n    }["Z.useEffect"], []), j;\n}, "NextTopLoader"), he = Z;\nZ.propTypes = {\n    color: i.string,\n    height: i.number,\n    showSpinner: i.bool,\n    crawl: i.bool,\n    crawlSpeed: i.number,\n    initialPosition: i.number,\n    easing: i.string,\n    speed: i.number,\n    template: i.string,\n    shadow: i.oneOfType([\n        i.string,\n        i.bool\n    ]),\n    zIndex: i.number,\n    showAtBottom: i.bool\n};\n0 && (0); /**\n *\n * NextTopLoader\n * @license MIT\n * @param {NextTopLoaderProps} props The properties to configure NextTopLoader\n * @returns {React.JSX.Element}\n *\n */  //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/nextjs-toploader/dist/index.js\n',
      );

      /***/
    },
};
